@INPROCEEDINGS{typed-stack-safe-compiler,
    author = {James Mckinna and Joel Wright},
    title = {A type-correct, stack-safe, provably correct, expression compiler},
    booktitle = {in Epigram. Submitted to the Journal of Functional Programming},
    year = {2006}
    localfile = {literature/StackSafe-Correct-Compiler_Mckinna_Wright.pdf}
}

@UNPUBLISHED{compiler-correctness-structured-graphs,
    author = {Patrick Bahr},
    title = {Proving Correctness of Compilers using Structured Graphs},
    note = {FLOPS '14, to appear},
    month = feb,
    year = {2014},
    abstract = {We present an approach to compiler implementation using Oliveira and
        Cook's structured graphs that avoids the use of explicit jumps in
        the generated code. The advantage of our method is that it takes
        the implementation of a compiler using a tree type along with its
        correctness proof and turns it into a compiler implementation using
        a graph type along with a correctness proof. The implementation and
        correctness proof of a compiler using a tree type without explicit
        jumps is simple, but yields code duplication. Our method provides
        a convenient way of improving such a compiler without giving up the
        benefits of simple reasoning.},
    keywords = {compiler,verification,graphs,fold,free monad}
    localfile = {Compiler-Correctness-Structured-Graphs_Bahr.pdf}
}
