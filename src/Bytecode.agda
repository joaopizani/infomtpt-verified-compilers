module Bytecode where

open import Data.Bool using (true; false)
open import Data.List using (List; []; _‚à∑_)
open import Data.Nat using (_+_)

open import Source

open import HFunctor


-- First, we define "typed stacks", which are stacks indexed by lists of TyExp.
-- Each element of the stack has therefore a corresponding type.
StackType : Set
StackType = List Ty‚Çõ

data Stack : StackType ‚Üí Set where
    Œµ    : Stack []
    _‚ñΩ_  : ‚àÄ {œÉ s'} ‚Üí ‚ÅÖ œÉ ‚ÅÜ ‚Üí Stack s' ‚Üí Stack (œÉ ‚à∑ s')

infixr 7 _‚ñΩ_


-- To complete the definition of the abstract machine,
-- we need to list the instructions of the bytecode operating on it, and give its semantics.
data Bytecode : StackType ‚Üí StackType ‚Üí Set where
    SKIP : ‚àÄ {s}    ‚Üí Bytecode s s
    PUSH : ‚àÄ {œÉ s}  ‚Üí (x : ‚ÅÖ œÉ ‚ÅÜ) ‚Üí Bytecode s (œÉ ‚à∑ s)
    ADD  : ‚àÄ {s}    ‚Üí Bytecode (‚Ñï‚Çõ ‚à∑ ‚Ñï‚Çõ ‚à∑ s) (‚Ñï‚Çõ ‚à∑ s)
    IF   : ‚àÄ {s s‚Ä≤} ‚Üí (t : Bytecode s s‚Ä≤) ‚Üí (e : Bytecode s s‚Ä≤) ‚Üí Bytecode (ùîπ‚Çõ ‚à∑ s) s‚Ä≤
    _‚ü´_  : ‚àÄ {s‚ÇÄ s‚ÇÅ s‚ÇÇ} ‚Üí (c‚ÇÅ : Bytecode s‚ÇÄ s‚ÇÅ) ‚Üí (c‚ÇÇ : Bytecode s‚ÇÅ s‚ÇÇ) ‚Üí Bytecode s‚ÇÄ s‚ÇÇ

infixl 4 _‚ü´_


data BytecodeF (r : StackType -> StackType -> Set) : (StackType -> StackType -> Set) where  
    SKIP' : ‚àÄ {s}    ‚Üí BytecodeF r s s
    PUSH' : ‚àÄ {Œ± s}  ‚Üí (x : ‚ÅÖ Œ± ‚ÅÜ) ‚Üí BytecodeF r s (Œ± ‚à∑ s)
    ADD'  : ‚àÄ {s}    ‚Üí BytecodeF r (‚Ñï‚Çõ ‚à∑ ‚Ñï‚Çõ ‚à∑ s) (‚Ñï‚Çõ ‚à∑ s)
    IF'   : ‚àÄ {s s‚Ä≤} ‚Üí (t : r s s‚Ä≤) ‚Üí (e : r s s‚Ä≤) ‚Üí BytecodeF r (ùîπ‚Çõ ‚à∑ s) s‚Ä≤
    _‚ü´'_  : ‚àÄ {s‚ÇÄ s‚ÇÅ s‚ÇÇ} ‚Üí (c‚ÇÅ : r s‚ÇÄ s‚ÇÅ) ‚Üí (c‚ÇÇ : r s‚ÇÅ s‚ÇÇ) ‚Üí BytecodeF r s‚ÇÄ s‚ÇÇ

mapBytecodeF : {a b : StackType -> StackType -> Set} -> ( {ixp ixq : StackType} ->           a ixp ixq ->           b ixp ixq) 
                                                     -> ( {ixp ixq : StackType} -> BytecodeF a ixp ixq -> BytecodeF b ixp ixq)
mapBytecodeF f SKIP' = SKIP'
mapBytecodeF f (PUSH' x) = PUSH' x
mapBytecodeF f ADD' = ADD'
mapBytecodeF f (IF' t e) = IF' (f t) (f e)
mapBytecodeF f (_‚ü´'_ c‚ÇÅ c‚ÇÇ)= f c‚ÇÅ ‚ü´' f c‚ÇÇ


BytecodeFunctor : HFunctor BytecodeF
BytecodeFunctor =
  record {
    hmap = mapBytecodeF
  }

-- Now the operational semantics of the bytecode.
exec : ‚àÄ {s s‚Ä≤} ‚Üí Bytecode s s‚Ä≤ ‚Üí Stack s ‚Üí Stack s‚Ä≤
exec SKIP        s           = s
exec (PUSH v)    s           = v ‚ñΩ s
exec ADD         (n ‚ñΩ m ‚ñΩ s) = (n + m) ‚ñΩ s
exec (IF t e)    (true  ‚ñΩ s) = exec t s
exec (IF t e)    (false ‚ñΩ s) = exec e s
exec (c‚ÇÅ ‚ü´ c‚ÇÇ)   s           = exec c‚ÇÇ (exec c‚ÇÅ s)

execAlg : ‚àÄ {s s‚Ä≤} ‚Üí BytecodeF (Œª t t' ‚Üí Stack t ‚Üí Stack t') s s‚Ä≤ ‚Üí Stack s ‚Üí Stack s‚Ä≤
execAlg SKIP'        s           = s
execAlg (PUSH' v)    s           = v ‚ñΩ s
execAlg ADD'         (n ‚ñΩ m ‚ñΩ s) = (n + m) ‚ñΩ s
execAlg (IF' t e)    (true  ‚ñΩ s) = t s
execAlg (IF' t e)    (false ‚ñΩ s) = e s
execAlg (c‚ÇÅ ‚ü´' c‚ÇÇ)   s           = c‚ÇÇ (c‚ÇÅ s)
