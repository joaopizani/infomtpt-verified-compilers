module Bytecode where

open import Data.Bool using (true; false)
open import Data.List using (List; []; _โท_)
open import Data.Nat using (_+_)

open import Source


-- First, we define "typed stacks", which are stacks indexed by lists of TyExp.
-- Each element of the stack has therefore a corresponding type.
StackType : Set
StackType = List Tyโ

data Stack : StackType โ Set where
    ฮต    : Stack []
    _โฝ_  : โ {ฯ s'} โ โ ฯ โ โ Stack s' โ Stack (ฯ โท s')

infixr 7 _โฝ_


-- To complete the definition of the abstract machine,
-- we need to list the instructions of the bytecode operating on it, and give its semantics.
data Bytecode : StackType โ StackType โ Set where
    SKIP : โ {s}    โ Bytecode s s
    PUSH : โ {ฯ s}  โ (x : โ ฯ โ) โ Bytecode s (ฯ โท s)
    ADD  : โ {s}    โ Bytecode (โโ โท โโ โท s) (โโ โท s)
    IF   : โ {s sโฒ} โ (t : Bytecode s sโฒ) โ (e : Bytecode s sโฒ) โ Bytecode (๐นโ โท s) sโฒ
    _โซ_  : โ {sโ sโ sโ} โ (cโ : Bytecode sโ sโ) โ (cโ : Bytecode sโ sโ) โ Bytecode sโ sโ

infixl 4 _โซ_


-- Now the operational semantics of the bytecode.
exec : โ {s sโฒ} โ Bytecode s sโฒ โ Stack s โ Stack sโฒ
exec SKIP        s           = s
exec (PUSH v)    s           = v โฝ s
exec ADD         (n โฝ m โฝ s) = (n + m) โฝ s
exec (IF t e)    (true  โฝ s) = exec t s
exec (IF t e)    (false โฝ s) = exec e s
exec (cโ โซ cโ)   s           = exec cโ (exec cโ s)
